// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injectors

import (
	"github.com/go-playground/validator/v10"
	"github.com/google/wire"
	"gorm.io/gorm"
	"nganterin-go/emails/services"
	controllers2 "nganterin-go/hotels/controllers"
	repositories2 "nganterin-go/hotels/repositories"
	services3 "nganterin-go/hotels/services"
	controllers4 "nganterin-go/midtrans/controllers"
	services5 "nganterin-go/midtrans/services"
	controllers3 "nganterin-go/orders/controllers"
	repositories3 "nganterin-go/orders/repositories"
	services4 "nganterin-go/orders/services"
	controllers6 "nganterin-go/partners/controllers"
	repositories6 "nganterin-go/partners/repositories"
	services7 "nganterin-go/partners/services"
	controllers7 "nganterin-go/reservations/controllers"
	repositories4 "nganterin-go/reservations/repositories"
	services8 "nganterin-go/reservations/services"
	controllers8 "nganterin-go/reviews/controllers"
	repositories7 "nganterin-go/reviews/repositories"
	services9 "nganterin-go/reviews/services"
	controllers5 "nganterin-go/storages/controllers"
	repositories5 "nganterin-go/storages/repositories"
	services6 "nganterin-go/storages/services"
	"nganterin-go/users/controllers"
	"nganterin-go/users/repositories"
	services2 "nganterin-go/users/services"
)

// Injectors from injector.go:

func InitializeUserController(db *gorm.DB, validate *validator.Validate) controllers.CompControllers {
	compRepositories := repositories.NewComponentRepository()
	compServices := services.NewComponentServices()
	servicesCompServices := services2.NewComponentServices(compRepositories, compServices, db, validate)
	compControllers := controllers.NewCompController(servicesCompServices)
	return compControllers
}

func InitializeHotelController(db *gorm.DB, validate *validator.Validate) controllers2.CompControllers {
	compRepositories := repositories2.NewComponentRepository()
	compService := services3.NewComponentServices(compRepositories, db, validate)
	compControllers := controllers2.NewCompController(compService)
	return compControllers
}

func InitializeOrderController(db *gorm.DB, validate *validator.Validate) controllers3.CompControllers {
	compRepositories := repositories3.NewComponentRepository()
	repositoriesCompRepositories := repositories2.NewComponentRepository()
	compRepositories2 := repositories.NewComponentRepository()
	compServices := services4.NewComponentServices(compRepositories, repositoriesCompRepositories, compRepositories2, db)
	compControllers := controllers3.NewCompController(compServices)
	return compControllers
}

func InitializeMidtransController(db *gorm.DB, validate *validator.Validate) controllers4.CompControllers {
	compRepositories := repositories3.NewComponentRepository()
	repositoriesCompRepositories := repositories4.NewComponentRepository()
	compServices := services5.NewComponentServices(compRepositories, repositoriesCompRepositories, db)
	compControllers := controllers4.NewCompController(compServices)
	return compControllers
}

func InitializeStorageController(db *gorm.DB, validate *validator.Validate) controllers5.CompControllers {
	compRepositories := repositories5.NewComponentRepository()
	compServices := services6.NewComponentServices(compRepositories, db)
	compControllers := controllers5.NewCompController(compServices)
	return compControllers
}

func InitializePartnerController(db *gorm.DB, validate *validator.Validate) controllers6.CompControllers {
	compRepositories := repositories6.NewComponentRepository()
	compServices := services.NewComponentServices()
	servicesCompServices := services7.NewComponentServices(compRepositories, compServices, db, validate)
	compControllers := controllers6.NewCompController(servicesCompServices)
	return compControllers
}

func InitializeReservationController(db *gorm.DB, validate *validator.Validate) controllers7.CompControllers {
	compRepositories := repositories4.NewComponentRepository()
	repositoriesCompRepositories := repositories2.NewComponentRepository()
	compServices := services8.NewComponentServices(compRepositories, repositoriesCompRepositories, db)
	compControllers := controllers7.NewCompController(compServices)
	return compControllers
}

func InitializeReviewController(db *gorm.DB, validate *validator.Validate) controllers8.CompControllers {
	compRepositories := repositories7.NewComponentRepository()
	repositoriesCompRepositories := repositories3.NewComponentRepository()
	compRepositories2 := repositories4.NewComponentRepository()
	compServices := services9.NewComponentServices(compRepositories, repositoriesCompRepositories, compRepositories2, db, validate)
	compControllers := controllers8.NewCompController(compServices)
	return compControllers
}

// injector.go:

var userFeatureSet = wire.NewSet(repositories.NewComponentRepository, services.NewComponentServices, services2.NewComponentServices, controllers.NewCompController)

var hotelFeatureSet = wire.NewSet(repositories2.NewComponentRepository, services3.NewComponentServices, controllers2.NewCompController)

var orderFeatureSet = wire.NewSet(repositories.NewComponentRepository, repositories2.NewComponentRepository, repositories3.NewComponentRepository, services4.NewComponentServices, controllers3.NewCompController)

var midtransFeatureSet = wire.NewSet(repositories3.NewComponentRepository, repositories4.NewComponentRepository, services5.NewComponentServices, controllers4.NewCompController)

var storageFeatureSet = wire.NewSet(repositories5.NewComponentRepository, services6.NewComponentServices, controllers5.NewCompController)

var partnerFeatureSet = wire.NewSet(repositories6.NewComponentRepository, services.NewComponentServices, services7.NewComponentServices, controllers6.NewCompController)

var reservationFeatureSet = wire.NewSet(repositories4.NewComponentRepository, repositories2.NewComponentRepository, services8.NewComponentServices, controllers7.NewCompController)

var reviewFeatureSet = wire.NewSet(repositories3.NewComponentRepository, repositories4.NewComponentRepository, repositories7.NewComponentRepository, services9.NewComponentServices, controllers8.NewCompController)
